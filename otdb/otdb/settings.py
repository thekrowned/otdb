"""
Django settings for otdb project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from dotenv import load_dotenv
load_dotenv()

import os
from pathlib import Path
from osu import AsynchronousClient, AsynchronousAuthHandler, Scope

from common.dummy_api import DummyClient


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.getenv("DEBUG")))

ALLOWED_HOSTS = ["*"] if DEBUG else ["otdb.sheppsu.me"]

IS_GITHUB_WORKFLOW = os.getenv("IS_GITHUB_WORKFLOW") is not None


# Application definition

INSTALLED_APPS = [
    "main.apps.MainConfig",
    "database.apps.DatabaseConfig",
    "api.apps.ApiConfig",
    "admin.apps.AdminConfig",

    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "servestatic.middleware.ServeStaticMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "common.middleware.ExceptionHandlingMiddleware",
    "common.middleware.TrafficStatisticsMiddleware"
]

ROOT_URLCONF = "otdb.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

ASGI_APPLICATION = "otdb.asgi.application"


from django.utils.log import DEFAULT_LOGGING


LOGGING = DEFAULT_LOGGING
LOGGING["handlers"]["console"]["level"] = "DEBUG" if DEBUG else "INFO"
LOGGING["loggers"]["django.request"] = {
    "handlers": ["console"],
    "level": "DEBUG"
}


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("PGDATABASE"),
        "USER": os.getenv("PGUSER"),
        "PASSWORD": os.getenv("PGPASSWORD"),
        "HOST": os.getenv("PGHOST"),
        "PORT": os.getenv("PGPORT"),
    }
}


STORAGES = {
    "staticfiles": {
        "BACKEND": "servestatic.storage.CompressedManifestStaticFilesStorage"
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "main.OsuUser"
AUTH_BACKEND = "django.contrib.auth.backends.ModelBackend"


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles" if not DEBUG else BASE_DIR / "static"
if not DEBUG:
    STATICFILES_DIRS = [
        BASE_DIR / "static"
    ]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


APPEND_SLASH = True


if not IS_GITHUB_WORKFLOW:
    OSU_CLIENT_ID = int(os.getenv("OSU_CLIENT_ID"))
    OSU_CLIENT_SECRET = os.getenv("OSU_CLIENT_SECRET")
    OSU_CLIENT_REDIRECT_URI = os.getenv("OSU_CLIENT_REDIRECT_URI")
    auth = AsynchronousAuthHandler(OSU_CLIENT_ID, OSU_CLIENT_SECRET, OSU_CLIENT_REDIRECT_URI, Scope.identify())
    OSU_AUTH_URL = auth.get_auth_url()
    OSU_CLIENT = AsynchronousClient(auth)
else:
    OSU_CLIENT = DummyClient(BASE_DIR)


GOOGLE_CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID")
GOOGLE_CLIENT_SECRET = os.getenv("GOOGLE_CLIENT_SECRET")
if not IS_GITHUB_WORKFLOW:
    from google_auth_oauthlib import flow

    redirect_uris = [
                "http://127.0.0.1:8000/google-auth-callback",
                "https://otdb.sheppsu.me/google-auth-callback"
            ]

    GOOGLE_AUTH_FLOW = flow.Flow.from_client_config({
        "web": {
            "client_id": GOOGLE_CLIENT_ID,
            "client_secret": GOOGLE_CLIENT_SECRET,
            "redirect_uris": redirect_uris,
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://accounts.google.com/o/oauth2/token"
        }
    }, scopes=["https://www.googleapis.com/auth/spreadsheets.readonly"])
    GOOGLE_AUTH_FLOW.redirect_uri = redirect_uris[0 if DEBUG else 1]

    GOOGLE_OAUTH_URL, _ = GOOGLE_AUTH_FLOW.authorization_url(
        access_type="offline",
        include_granted_scopes="true",
        prompt="consent"
    )
